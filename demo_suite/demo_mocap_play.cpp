

#include <iostream>
#include <sstream>
#include <gdhe/client.hpp>

using namespace jafar;

/**
	This demo can replay a 6D preprocessed motion capture log file in gdhe.
	You can preprocess the original log file with the scripts 
	prepare_mocap.rb and convert_mocap_2_pose.m available in rtslam module.
	
	TODO:
	- read timestamps and play real time
	- change color of frame when missing data
	- can control play in console (frame by frame, pause/play...)
	*/

int main(int argc, char **argv)
{
	int itime, ix, iy, iz, iyaw, ipitch, iroll;
	int max_elt = 0;
	
	switch (argc)
	{
		case 2: // default values for files generated by convert_mocap_2_pose.m script
std::cout << "case 2" << std::endl;
			itime = 0;
			ix = 1;
			iy = 2;
			iz = 3;
			iyaw = 19;
			ipitch = 18;
			iroll = 17;
			max_elt = 19;
			break;
		case 9:
		std::cout << "case 9" << std::endl;
			itime = atoi(argv[2]);
			ix = atoi(argv[3]);
			iy = atoi(argv[4]);
			iz = atoi(argv[5]);
			iyaw = atoi(argv[6]);
			ipitch = atoi(argv[7]);
			iroll = atoi(argv[8]);
			for(int i = 2; i <= 8; i++)
				{ int index = atoi(argv[i]); if (index > max_elt) max_elt = index; }
			break;
		default:
		std::cout << "case x" << std::endl;
			std::cout << "Usage: " << std::endl;
			std::cout << " mocap_play file (for files generated by convert_mocap_2_pose.m script)" << std::endl;
			std::cout << " mocap_play file itime ix iy iz iyaw ipitch iroll (generic column indices)" << std::endl;
			return 1;
	}
	
	gdhe::Client gdheClient;
	gdheClient.launch_server();
	gdheClient.connect();
	gdheClient.setCameraTarget(0.,0.,1.);
	gdheClient.setCameraPos(60.,15.,4.);

	std::fstream f;
	f.open(argv[1], std::ios_base::in);
	if (!f.is_open()) { std::cout << "Failed to open file " << argv[1] << std::endl; return 1; }
	
	/// world objects
	gdhe::Frame frameWorld(1.0);
	frameWorld.setColor(0,0,0);
	frameWorld.setPose(0,0,0.001,0,0,0);
	gdheClient.addObject(&frameWorld, true);
	
	gdhe::Grid grid(10., 1.0);
	grid.setColor(192,192,192);
	gdheClient.addObject(&grid);
	
	/// robot object
	gdhe::Frame frame(0.2);
	frame.setColor(0,255,0);
	gdheClient.addObject(&frame, false);
	
	gdhe::Robot camera("camera", 0, 0, 0, 0, 0, 0);
	gdheClient.addObject(&camera, false);
	
	gdhe::Sphere projection(0.02, 6);
	projection.setColor(0,0,0);
	gdheClient.addObject(&projection, false);
	
	const int line_size = 1024;
	char line[line_size];
	double *values = new double[max_elt+1];
	
	while(f.getline(line, line_size))
	{
		std::istringstream iss(line);
		for(int i = 0; i <= max_elt; i++)
			iss >> values[i];
		
		values[iyaw] *= 180/M_PI;
		values[ipitch] *= 180/M_PI;
		values[iroll] *= 180/M_PI;
		
		//std::cout << "time " << values[itime] << "\tset pose " << values[ix] << "\t" << values[iy] << "\t" << values[iz] << "\t; " << values[iyaw] << "\t" << values[ipitch] << "\t" << values[iroll] << std::endl;
		frame.setPose(values[ix], values[iy], values[iz], values[iyaw], values[ipitch], values[iroll]);
		camera.setPose(values[ix], values[iy], values[iz], values[iyaw], values[ipitch], values[iroll]);
		projection.setPose(values[ix], values[iy], 0., 0., 0., 0.);
		frame.refresh();
		camera.refresh();
		projection.refresh();
		usleep(9*1000);
	}
	
	delete[] values;
}

