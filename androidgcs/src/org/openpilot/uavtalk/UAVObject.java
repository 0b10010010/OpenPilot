package org.openpilot.uavtalk;

public abstract class UAVObject {
	  
	  
	      /**
	       * Object update mode
	       */
	      public enum UpdateMode {
	              UPDATEMODE_PERIODIC, /** Automatically update object at periodic intervals */
	              UPDATEMODE_ONCHANGE, /** Only update object when its data changes */
	              UPDATEMODE_MANUAL,   /** Manually update object, by calling the updated() function */
	              UPDATEMODE_NEVER     /** Object is never updated */
	      } ;

	      /**
	       * Access mode
	       */
	      public enum AccessMode{
	              ACCESS_READWRITE,
	              ACCESS_READONLY
	      } ;
	      
	      /**
	       * Access mode
	       */
	      public enum Acked{
	              FALSE,
	              TRUE
	      } ;
	      
	      final class Metadata {
	    	  public AccessMode flightAccess; /** Defines the access level for the local flight transactions (readonly and readwrite) */
	    	  public AccessMode gcsAccess; /** Defines the access level for the local GCS transactions (readonly and readwrite) */
	    	  public Acked flightTelemetryAcked; /** Defines if an ack is required for the transactions of this object (1:acked, 0:not acked) */
	    	  public UpdateMode flightTelemetryUpdateMode; /** Update mode used by the autopilot (UpdateMode) */
	    	  public int flightTelemetryUpdatePeriod; /** Update period used by the autopilot (only if telemetry mode is PERIODIC) */
	    	  public Acked gcsTelemetryAcked; /** Defines if an ack is required for the transactions of this object (1:acked, 0:not acked) */
	    	  public UpdateMode gcsTelemetryUpdateMode; /** Update mode used by the GCS (UpdateMode) */
	    	  public int gcsTelemetryUpdatePeriod; /** Update period used by the GCS (only if telemetry mode is PERIODIC) */
	    	  public UpdateMode loggingUpdateMode; /** Update mode used by the logging module (UpdateMode) */
	    	  public int loggingUpdatePeriod; /** Update period used by the logging module (only if logging mode is PERIODIC) */
	      } ;

	      public UAVObject(int objID, Boolean isSingleInst, String name) {
	    	  assert(objID == getObjID()); // ID is in implementation code, make sure it matches object
	    	  assert(name.equals(getName()));	      
	    	  this.isSingleInst = isSingleInst;
	    	  meta = getDefaultMetadata();
	      };
	      
	      public void initialize(int instID) {
	    	  this.instID = instID;
	      }
	      
	      public int getInstID() { return instID; }	      
	      public Boolean isSingleInstance() { return isSingleInst; }	      
	      public String getName() { return getObjName(); }  // matching QT API to the current autogen code	      
	      	
	      public abstract int getObjID();	      
	      public abstract String getDescription();
	      public abstract String getObjName();
	      
	      int getNumBytes() {
	    	  return serialize().length;
	      }

	      // The name of the serializer and deserialize from the autogenerated code
	      public abstract byte[] serialize();	      
	      public abstract void deserialize(byte[] arr,int offset);
	      
	      byte [] pack() {
	    	  return serialize();
	      }
	      
	      Boolean unpack(byte [] data) {
	    	deserialize(data, 0);
			return true;  
	      }
	      
	      public abstract void setMetadata(Metadata obj);
	      public abstract Metadata getMetadata();
	      public abstract Metadata getDefaultMetadata();

	      private Boolean isSingleInst;
	      private int instID;
	      private UAVMetaObject meta;

	      /*  
	       // Unported code from QT	      
	      bool save();
	      bool save(QFile& file);
	      bool load();
	      bool load(QFile& file);
	      virtual void setMetadata(const Metadata& mdata) = 0;
	      virtual Metadata getMetadata() = 0;
	      virtual Metadata getDefaultMetadata() = 0;
	      void requestUpdate();
	      void updated();
	      void lock();
	      void lock(int timeoutMs);
	      void unlock();
	      QMutex* getMutex();
	      qint32 getNumFields();
	      QList<UAVObjectField*> getFields();
	      UAVObjectField* getField(const QString& name);
	      QString toString();
	      QString toStringBrief();
	      QString toStringData();
	      void emitTransactionCompleted(bool success);

	  signals:
	      void objectUpdated(UAVObject* obj);
	      void objectUpdatedAuto(UAVObject* obj);
	      void objectUpdatedManual(UAVObject* obj);
	      void objectUnpacked(UAVObject* obj);
	      void updateRequested(UAVObject* obj);
	      void transactionCompleted(UAVObject* obj, bool success);

	  private slots:
	      void fieldUpdated(UAVObjectField* field);

	  protected:
	      quint32 objID;
	      quint32 instID;
	      bool isSingleInst;
	      QString name;
	      QString description;
	      quint32 numBytes;
	      QMutex* mutex;
	      quint8* data;
	      QList<UAVObjectField*> fields;

	      void initializeFields(QList<UAVObjectField*>& fields, quint8* data, quint32 numBytes);
	      void setDescription(const QString& description);
	      */
}
