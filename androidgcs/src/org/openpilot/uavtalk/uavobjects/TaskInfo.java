/**
 ******************************************************************************
 *
 * @file       uavobjecttemplate.cpp
 * @author     The OpenPilot Team, http://www.openpilot.org Copyright (C) 2010.
 * @brief      Template for an uavobject in java
 *             This is a autogenerated file!! Do not modify and expect a result.
 *             Task information
 *
 * @see        The GNU Public License (GPL) Version 3
 *
 *****************************************************************************/
/*
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License
 * for more details.
 *
 * You should have received a copy of the GNU General Public License along
 * with this program; if not, write to the Free Software Foundation, Inc.,
 * 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA
 */

package org.openpilot.uavtalk.uavobjects;

import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import org.openpilot.uavtalk.UAVObjectManager;
import org.openpilot.uavtalk.UAVObject;
import org.openpilot.uavtalk.UAVDataObject;
import org.openpilot.uavtalk.UAVObjectField;

/**
Task information

generated from taskinfo.xml
 **/
public class TaskInfo extends UAVDataObject {

	public TaskInfo() {
		super(OBJID, ISSINGLEINST, ISSETTINGS, NAME);
		
		List<UAVObjectField> fields = new ArrayList<UAVObjectField>();
		

		List<String> StackRemainingElemNames = new ArrayList<String>();
		StackRemainingElemNames.add("System");
		StackRemainingElemNames.add("Actuator");
		StackRemainingElemNames.add("Attitude");
		StackRemainingElemNames.add("TelemetryTx");
		StackRemainingElemNames.add("TelemetryTxPri");
		StackRemainingElemNames.add("TelemetryRx");
		StackRemainingElemNames.add("GPS");
		StackRemainingElemNames.add("ManualControl");
		StackRemainingElemNames.add("Altitude");
		StackRemainingElemNames.add("AHRSComms");
		StackRemainingElemNames.add("Stabilization");
		StackRemainingElemNames.add("Guidance");
		StackRemainingElemNames.add("FlightPlan");
		StackRemainingElemNames.add("Com2UsbBridge");
		StackRemainingElemNames.add("Usb2ComBridge");
		fields.add( new UAVObjectField("StackRemaining", "bytes", UAVObjectField.FieldType.UINT16, StackRemainingElemNames, null) );

		List<String> RunningElemNames = new ArrayList<String>();
		RunningElemNames.add("System");
		RunningElemNames.add("Actuator");
		RunningElemNames.add("Attitude");
		RunningElemNames.add("TelemetryTx");
		RunningElemNames.add("TelemetryTxPri");
		RunningElemNames.add("TelemetryRx");
		RunningElemNames.add("GPS");
		RunningElemNames.add("ManualControl");
		RunningElemNames.add("Altitude");
		RunningElemNames.add("AHRSComms");
		RunningElemNames.add("Stabilization");
		RunningElemNames.add("Guidance");
		RunningElemNames.add("FlightPlan");
		RunningElemNames.add("Com2UsbBridge");
		RunningElemNames.add("Usb2ComBridge");
		List<String> RunningEnumOptions = new ArrayList<String>();
		RunningEnumOptions.add("False");
		RunningEnumOptions.add("True");
		fields.add( new UAVObjectField("Running", "bool", UAVObjectField.FieldType.ENUM, RunningElemNames, RunningEnumOptions) );

		List<String> RunningTimeElemNames = new ArrayList<String>();
		RunningTimeElemNames.add("System");
		RunningTimeElemNames.add("Actuator");
		RunningTimeElemNames.add("Attitude");
		RunningTimeElemNames.add("TelemetryTx");
		RunningTimeElemNames.add("TelemetryTxPri");
		RunningTimeElemNames.add("TelemetryRx");
		RunningTimeElemNames.add("GPS");
		RunningTimeElemNames.add("ManualControl");
		RunningTimeElemNames.add("Altitude");
		RunningTimeElemNames.add("AHRSComms");
		RunningTimeElemNames.add("Stabilization");
		RunningTimeElemNames.add("Guidance");
		RunningTimeElemNames.add("FlightPlan");
		RunningTimeElemNames.add("Com2UsbBridge");
		RunningTimeElemNames.add("Usb2ComBridge");
		fields.add( new UAVObjectField("RunningTime", "%", UAVObjectField.FieldType.UINT8, RunningTimeElemNames, null) );


		// Compute the number of bytes for this object
		int numBytes = 0;
		ListIterator<UAVObjectField> li = fields.listIterator();
		while(li.hasNext()) {
			numBytes += li.next().getNumBytes();
		}
		NUMBYTES = numBytes;

		// Initialize object
		initializeFields(fields, ByteBuffer.allocate(NUMBYTES), NUMBYTES);
		// Set the default field values
		setDefaultFieldValues();
		// Set the object description
		setDescription(DESCRIPTION);
	}

	/**
	 * Create a Metadata object filled with default values for this object
	 * @return Metadata object with default values
	 */
	public Metadata getDefaultMetadata() {
		UAVObject.Metadata metadata = new UAVObject.Metadata();
		metadata.gcsAccess = UAVObject.AccessMode.ACCESS_READWRITE;
		metadata.gcsTelemetryAcked = UAVObject.Acked.TRUE;
		metadata.gcsTelemetryUpdateMode = UAVObject.UpdateMode.UPDATEMODE_ONCHANGE;
		metadata.gcsTelemetryUpdatePeriod = 0;

		metadata.flightAccess = UAVObject.AccessMode.ACCESS_READWRITE;
		metadata.flightTelemetryAcked = UAVObject.Acked.TRUE;
		metadata.flightTelemetryUpdateMode = UAVObject.UpdateMode.UPDATEMODE_PERIODIC;
		metadata.flightTelemetryUpdatePeriod = 10000;

		metadata.loggingUpdateMode = UAVObject.UpdateMode.UPDATEMODE_PERIODIC;
		metadata.loggingUpdatePeriod = 1000;
		return metadata;
	}

	/**
	 * Initialize object fields with the default values.
	 * If a default value is not specified the object fields
	 * will be initialized to zero.
	 */
	public void setDefaultFieldValues()
	{

	}

	/**
	 * Create a clone of this object, a new instance ID must be specified.
	 * Do not use this function directly to create new instances, the
	 * UAVObjectManager should be used instead.
	 */
	public UAVDataObject clone(int instID) {
		// TODO: Need to get specific instance to clone
		try {
			TaskInfo obj = new TaskInfo();
			obj.initialize(instID, this.getMetaObject());
			return obj;
		} catch  (Exception e) {
			return null;
		}
	}

	/**
	 * Static function to retrieve an instance of the object.
	 */
	public TaskInfo GetInstance(UAVObjectManager objMngr, int instID)
	{
	    return (TaskInfo)(objMngr.getObject(TaskInfo.OBJID, instID));
	}

	// Constants
	protected static final int OBJID = 0xE34A7C32;
	protected static final String NAME = "TaskInfo";
	protected static String DESCRIPTION = "Task information";
	protected static final boolean ISSINGLEINST = 1 == 1;
	protected static final boolean ISSETTINGS = 0 == 1;
	protected static int NUMBYTES = 0;


}