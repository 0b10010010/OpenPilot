/*!
  \addtogroup jmath Module jmath

\version 0.1

\author thomas.lemaire@laas.fr

Module jmath defines some common mathematical tools, among them vector
and matrix manipulation, random number generation,...

\section secJmathUblas About uBLAS

uBlas library from the boost project (http://www.boost.org) implements
the Basic Linear Algebra System specification in a efficient way (it
uses templates and operator expressions). It defines different vectors
and matrix types (dense, symmetric, sparse, banded).

Links of interest concerning uBlas:

  - uBlas doc at http://boost.org/libs/numeric/ublas/doc/index.htm,
  - <a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?Effective_UBLAS">
Effective uBlas</a>
  - <a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?Linear_Algebra_With_UBLAS">
Linear Algebra With uBlas</a>
  - <a href="http://www.crystalclearsoftware.com/cgi-bin/boost_wiki/wiki.pl?Frequently_Asked_Questions_Using_UBLAS"> FAQ using uBlas</a>

\subsection subsecJmathJblas Standard jblas.hpp header 

jblas.hpp is the standard jafar header to use ublas in your own
modules. It defines some standard vector and matrix types in the \c
jafar::blas namespace (shortcut jblas).  If any type of vector or
matrix is needed but is not redefined in jblas.hpp, we recommend to
define it rather than using directly the boost uBlas type.

  The module filter is a good example of how to use linear algebra in
jafar. 

\subsection subsecJmathPerf uBlas compilation and performance

Like many other C++ libraries, uBlas is implemented in templates, so
this is the user who controls the compilation of uBlas (in Jafar, you
edit the \c User.make of your module). uBlas can use exceptions to
report errors, we recommand you use this feature, it is enabled with
\c -DBOOST_UBLAS_USE_EXCEPTIONS. For optimal performance you may also
define \c -DNDEBUG to suppress a lot of internal checks (it is more
than ten times faster !). If you use uBlas in your module, your \c
User.make should contain:

\verbatim
CPPFLAGS += $(BOOST_CPPFLAGS) -DBOOST_UBLAS_USE_EXCEPTIONS
CPPFLAGS += -DNDEBUG
\endverbatim

\subsection subsecJmathTcl uBLAS and tcl

This module wraps some basic functions to manipulate vector and matrix
from boost ublas library in tcl. All the types defined in jblas.hpp
are available.

The constructors defined in the ublas vector and matrix class are not
well suited to be used from tcl (available with \c new_vec, \c
new_mat,...). Others functions are defined which are called \c
create_vec, \c create_mat,... the function setValue can init the value
of the container from a string. Also some \c print functions are
defined. These extra template functions are defined in jmathTcl.hpp.

\subsection subsecJmathswig uBLAS and swig

If your module manipulate data types defined in jblas.hpp, you may
want to manipulate these types inside a tcl shell. As is, you get a
reasonable interface to manipulate them using function wrapped in the
jmath module. 

If you want to use the OO notation on data returned by functions from
your module, you need to add the following to your module.i:

\code
%import "jmath/jblas.i"
\endcode

For example, module filter uses this hint.

\section secJmathNumericalTools Numerical tools

Please, do not reinvent the wheel ! Many good, efficient, well
documented and free libraries exist. Moreover \e bindings are provided
for uBlas to other well known algebra libraries such that LAPACK or
ATLAS. These bindings add powerfull algebra routines to
uBlas. Currently they are not part of the official boost release but
can be found on the boost-sandbox cvs.

  - LAPACK: http://www.netlib.org/lapack/
  - <a href="http://boost.cvs.sourceforge.net/*checkout*/boost-sandbox/boost-sandbox/libs/numeric/bindings/doc/index.html">Boost.Numeric.Bindings</a> (click on \e download to browse the doc)

The use of Numerical Recipes code is not recommended since it is not published under a free licence. However, the books can help a lot, they are freely available at http://www.library.cornell.edu/nr .

\section secJmathMacro Macro

- plot.tcl defines a front-end to gnuplot, a demo script is demoPlot.tcl

\section secJmathExample Example

\include demoJblas.tcl

\section secJmathInterface Tcl interface (generated by swig)

  The interface of the module is generated from the following files:
    - jmath.i defines the wrapped classes and functions,
    - jmathException.i defines the \c try { } \c catch block
for this module.

*/

